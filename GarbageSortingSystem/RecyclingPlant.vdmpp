class RecyclingPlant

instance variables

rcTrucks : set of GarbageTruck := {};

sortedGarbage : GarbageSorter`GarbageMap := {   <GLASSID>   |-> {},
                                                <METALID>   |-> {},
                                                <PAPERID>   |-> {},
                                                <PLASTICID> |-> {}
                                            };

functions

private getSeqOfIndividualGarbageFromTruck : GarbageTruck -> set of GarbageType
getSeqOfIndividualGarbageFromTruck(gbTruck) == (
    dunion {i.getGarbagePack() | i in set gbTruck.getTruckGarbage()}
);


operations

-- Sort the trucks, and then show the sorted garbage
public Step : () ==> ()
Step() == (
    dcl sortedMap : GarbageSorter`GarbageMap := sortAllTrucks()
    (

    );
);



public addFilledTrucksToPlant : set of GarbageTruck ==> ()
addFilledTrucksToPlant(filledTrucks) == 
    rcTrucks := rcTrucks union filledTrucks;

private sortAllTrucks : () ==> GarbageSorter`GarbageMap
sortAllTrucks() == (
    for all t in set rcTrucks
        do 
            let x = getSeqOfIndividualGarbageFromTruck(t) in
                sortedGarbage := GarbageSorter`MapCombine(sortedGarbage,GarbageSorter`sortSetofGarbagePack(x));
    return sortedGarbage 
);




end RecyclingPlant