class GarbageTruck is subclass of GLOBAL

instance variables
-- TODO ADD INVARIANT
garbageTruckId_ : seq of char := "Undefined";
garbagePackSet_ : set of GarbagePack := {};

functions
private checkTruckWeight : set of GarbagePack -> bool
checkTruckWeight(gpset) ==
(
    forall gps in set gpset & 
        SumWeightGarbagePack(gps.getGarbagePack()) > 1000
);

private checkTruckDimension : set of GarbagePack -> bool
checkTruckDimension(gpset) ==
(
    forall gps in set gpset & 
        SumDimensionGarbagePack(gps.getGarbagePack()) > 300
);

SumDimensionGarbagePack: set of GarbageType +> nat
SumDimensionGarbagePack(s) ==
    if s = {}                         
    then 0                                         
    else let e in set s in
        e.getVolume() + SumDimensionGarbagePack(s \ {e})
measure card s;

SumWeightGarbagePack: set of GarbageType +> nat
SumWeightGarbagePack(s) ==
    if s = {}                         
    then 0                                         
    else let e in set s in
        e.getWeight() + SumWeightGarbagePack(s \ {e})
measure card s;



operations
public GarbageTruck : seq of char ==> GarbageTruck
GarbageTruck(id) == 
(
    garbageTruckId_ := id;
);

public isTruckFull : () ==> bool
isTruckFull() ==
(
    return checkTruckWeight(getTruckGarbage()) and checkTruckDimension(getTruckGarbage());
);

pure public getTruckGarbage : () ==> set of GarbagePack
getTruckGarbage() ==
(
    return garbagePackSet_;
);

public addToTruck : GarbagePack ==> ()
addToTruck(gp) ==
(
    garbagePackSet_ := garbagePackSet_ union {gp};
);



-- pure public getTruckId : () ==> seq of char
-- getTruckId() == 
-- (
--     return garbageTruckId_;
-- );


end GarbageTruck