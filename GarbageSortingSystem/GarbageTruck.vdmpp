class GarbageTruck is subclass of GLOBAL

instance variables
-- TODO ADD INVARIANT
garbageTruckId_ : [seq of char] := nil;

-- Invariant for weight of truck if time can be done
garbagePackSet_ : set of GarbagePack := {};

functions
private checkTruckWeight : set of GarbagePack -> bool
checkTruckWeight(gpset) ==
(
    GLOBAL`SumSet({SumWeightGarbagePack(i.getGarbagePack()) | i in set gpset & gpset <> {}}) > 1000

    -- forall gps in set gpset & 
    --     SumWeightGarbagePack(gps.getGarbagePack()) > 1000 -- TODO Error HERE, check on Garbagepack and no set of 
);

private checkTruckDimension : set of GarbagePack -> bool
checkTruckDimension(gpset) ==
(
    GLOBAL`SumSet({SumDimensionGarbagePack(i.getGarbagePack()) | i in set gpset & gpset <> {}}) > 300

    -- forall gps in set gpset & 
    --     SumDimensionGarbagePack(gps.getGarbagePack()) > 300 -- TODO Error HERE, check on Garbagepack and no set of
);


public willBeOverfilled : set of GarbagePack * nat * nat -> bool
willBeOverfilled(gpset, w, vol) ==
(
    GLOBAL`SumSet({SumWeightGarbagePack(i.getGarbagePack()) | i in set gpset & gpset <> {}}) > 1000 
    and GLOBAL`SumSet({SumDimensionGarbagePack(i.getGarbagePack()) | i in set gpset & gpset <> {}}) + vol > 300

    -- forall gps in set gpset & 
    --     (SumWeightGarbagePack(gps.getGarbagePack()) + w) > 1000 and (SumDimensionGarbagePack(gps.getGarbagePack()) + vol) > 300
);


-- POST Condition, ID it not nil anymore
operations
public GarbageTruck : seq of char ==> GarbageTruck
GarbageTruck(id) == 
(
    garbageTruckId_ := id;
);

pure public isTruckFull : () ==> bool
isTruckFull() ==
(
    return checkTruckWeight(getTruckGarbage()) and checkTruckDimension(getTruckGarbage());
);

pure public getTruckGarbage : () ==> set of GarbagePack
getTruckGarbage() ==
(
    return garbagePackSet_;
);

public addToTruck : GarbagePack ==> ()
addToTruck(gp) ==
(
    garbagePackSet_ := garbagePackSet_ union {gp};
);

public emptyTruck : () ==> ()
emptyTruck() == 
(
    garbagePackSet_ := {}
)

end GarbageTruck