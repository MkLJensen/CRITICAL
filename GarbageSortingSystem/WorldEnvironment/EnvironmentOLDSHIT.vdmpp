--class EnvironmentOLD is subclass of GLOBAL


--types

--inline  = seq of char * GarbagePack * Time;   

--instance variables 
--FinishedCollecting : bool := false;
--addrs : [AddressRepository] := nil;
--io : IO := new IO();

--inlines     : seq of inline  := [];


--operations

--public Environment : seq of char ==> Environment
--Environment(fname) ==
--     def mk_(-,input) = io.freadval[seq of inline](fname) 
--         in
--             inlines := input;

-- public setAddrRepo : AddressRepository ==> ()
-- setAddrRepo(adr) ==
--     addrs := adr;

-- public Run:()==>()
-- Run()==
--     (
--         IO`println("hjf");
--     );

    

-- -- public Run : () ==> ()
-- -- Run() ==
-- --     (
-- --         while (not FinishedCollecting) do 
-- --         IO`println("lort");
-- --         -- (updateGarbageTrucks();
-- --         -- --RecyclingPlant.Step();
-- --         -- World`timer.StepTime();
-- --         -- );
-- --     );


-- private updateGarbageTrucks : () ==> ()
-- updateGarbageTrucks() ==
-- (
--     if len addrs.getAddresses > 0
--     then 
--         (dcl curtime : Time := World`timer.GetTime(),
--             doneRead : bool := false;
--             while not doneRead do
--             (
--                 def mk_(adrString, gbtype, weight, width, length, height, objTime) = hd inlines
--                 in
--                     if objTime <= curtime
--                     then (
--                             cases gbtype:
--                                 "glass" -> addrs.addToAddresses({adrString |-> {new Glass(mk_dimensionType(width, length, height), weight)}}),
--                                 "metal" -> addrs.addToAddresses({adrString |-> {new Metal(mk_dimensionType(width, length, height), weight)}}),
--                                 "paper" -> addrs.addToAddresses({adrString |-> {new Paper(mk_dimensionType(width, length, height), weight)}}),
--                                 "plastic" -> addrs.addToAddresses({adrString |-> {new Plastic(mk_dimensionType(width, length, height), weight)}}),
--                                 others -> skip--IO`println("Error Garbage Type")
                            
--                             inlines := tl inlines; 
--                             doneRead := len inlines = 0;
--                         )
--                     else
--                         doneRead := true

--             )

--         )
--     else
--         FinishedCollecting := true

-- );



--end EnvironmentOLD