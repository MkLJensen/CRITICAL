class AddressRepository is subclass of GLOBAL

instance variables
    addresses_ : map seq of char to set of GarbagePack := {|->};
    inv InvAdressID(addresses_, InvalidAddressChars);


functions
private InvAdressID : map seq of char to set of GarbagePack* set of char -> bool
InvAdressID(addr, invalidChars) == 
    forall adr in set dom addr &
        forall s in seq adr &
            forall ch in set invalidChars & s <> ch;


operations
public AddressRepository : map seq of char to set of GarbagePack ==> AddressRepository
AddressRepository(aMap) == 
(
    addresses_ := aMap;
);

public addToAddresses : map seq of char to set of GarbagePack ==> ()
addToAddresses(aMap) ==
(
    for all addr in set dom aMap do
    (
        addresses_(addr) := addresses_(addr) union aMap(addr)
    )
)
pre forall aP in set dom aMap & 
    exists1 p in set dom addresses_ & aP = p

-- Dunion can be used because objects are used and therefore parts of the set wont be removed if they are the same.
post forall gR in set dunion rng aMap & 
    exists1 p in set dunion rng addresses_ & p = gR;


pure public getGarbageFromAddress : seq of char ==> set of GarbagePack
getGarbageFromAddress(addr) ==
(
    return addresses_(addr)
)
pre exists1 p in set dom addresses_ & p = addr;

public removeGarbageFromAddress : seq of char * GarbagePack ==> ()
removeGarbageFromAddress(addr, GarbagePack) ==
(
    addresses_(addr) := addresses_(addr) \ {GarbagePack};
)
pre exists1 p in set dom addresses_ & p = addr
post forall p in set rng addresses_ & 
            forall gp in set p & GarbagePack <> gp;


pure public getAddresses : () ==> map seq of char to set of GarbagePack
getAddresses() ==
(
    return addresses_;
);

end AddressRepository